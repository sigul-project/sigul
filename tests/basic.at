# Copyright (C) 2011 Red Hat, Inc.  All rights reserved.
#
# This copyrighted material is made available to anyone wishing to use, modify,
# copy, or redistribute it subject to the terms and conditions of the GNU
# General Public License v.2.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY expressed or implied, including the
# implied warranties of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.  You should have
# received a copy of the GNU General Public License along with this program; if
# not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth
# Floor, Boston, MA 02110-1301, USA.  Any Red Hat trademarks that are
# incorporated in the source code or documentation are not subject to the GNU
# General Public License and may only be used or replicated with the express
# permission of Red Hat, Inc.
#
# Red Hat Author: Miloslav Trmaƒç <mitr@redhat.com>

# Can we split this into groups?
AT_SETUP([Basic functionality])

m4_include([include_setup.at])
m4_include([include_start.at])


create_rpm()
{
	sed "s/@N@/$1"/g < "$abs_srcdir/tests/testrpm.spec" > "testrpm$1".spec
	rpmbuild --quiet --define "_specdir $(pwd)" --define "_rpmdir $(pwd)" \
		--define '_rpmfilename %{name}.rpm' --clean --rmspec \
		-bb "testrpm$1.spec"
}

# list-users
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-users], ,
[root
])

# new-user
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		new-user unprivileged])
AT_CHECK([printf 'rootroot\0pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		new-user --with-password unprivileged2-pw])
AT_CHECK([printf 'rootroot\0admin\0' | \
		sigul -c client/client.conf --batch -v -v \
		new-user --admin admin])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch \
		new-user unprivileged], 1, ,
[Error: The specified object already exists
])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-users], ,
[admin
root
unprivileged
unprivileged2-pw
])
AT_CHECK([printf 'this_doesnt_matter\0' | \
		sigul -c client/client.conf --batch \
		-u unprivileged list-users], 1, ,
[Error: Authentication failed
])
AT_CHECK([printf 'pw\0' | \
		sigul -c client/client.conf --batch \
		-u unprivileged2-pw list-users], 1, ,
[Error: Authentication failed
])
AT_CHECK([printf 'admin\0' | \
		sigul -c client/client.conf --batch -v -v \
		-u admin list-users], ,
[admin
root
unprivileged
unprivileged2-pw
])


# delete-user
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		new-user to-be-deleted])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		delete-user to-be-deleted])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch \
		delete-user to-be-deleted], 1, ,
[Error: The specified user was not found
])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-users], ,
[admin
root
unprivileged
unprivileged2-pw
])

# user-info
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		user-info root], ,
[Administrator: yes
])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		user-info unprivileged], ,
[Administrator: no
])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch \
		user-info this-doesnt-exist], 1, ,
[Error: The specified user was not found
])


# modify-user
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		modify-user --admin yes --new-name unprivilegedX unprivileged])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		modify-user --admin no --new-name unprivileged unprivilegedX])
AT_CHECK([printf 'rootroot\0pwX\0' | \
		sigul -c client/client.conf --batch -v -v \
		modify-user --change-password unprivileged2-pw])
AT_CHECK([printf 'rootroot\0pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		modify-user --change-password unprivileged2-pw])

# list-keys
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-keys])

# new-key
AT_CHECK([[
	printf 'rootroot\0root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		new-key --key-admin root --key-type gnupg \
		--gnupg-name-real 'Real Name' \
		--gnupg-name-comment Comment --gnupg-name-email key@example.com \
		--gnupg-expire-date 2030-12-31 key > key-pubkey.asc
]])
AT_CHECK([[
	printf 'rootroot\0root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		new-key --key-admin root --key-type ECC ecckey > ecc-key-pubkey.asc
]])
AT_CHECK([[
	printf 'rootroot\0root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		new-key --key-admin root --key-type RSA rsakey > rsa-key-pubkey.asc
]])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-keys], ,
[ecckey (ECC)
key (gnupg)
rsakey (RSA)
])


# key-user-info
AT_CHECK([printf 'rootroot\0' | \
 		sigul -c client/client.conf --batch -v -v \
		key-user-info root key], ,
[Access defined, key administrator: yes
])
AT_CHECK([printf 'rootroot\0' | \
 		sigul -c client/client.conf --batch -v -v \
		key-user-info admin key], ,
[No access defined
])


# import-key
# Generate new RSA and ECC keys
openssl genrsa 2048 | openssl pkcs8 -topk8 -passout "pass:imported" -out testrsakey.pem
openssl ecparam -name prime256v1 -genkey | openssl pkcs8 -topk8 -passout "pass:imported" -out testecckey.pem

AT_CHECK([printf 'rootroot\0imported\0imported-key-pw\0' | \
 		sigul -c client/client.conf --batch -v -v \
		import-key imported-key \
		"$abs_srcdir/tests/imported-secret-key.asc"])
AT_CHECK([printf 'rootroot\0imported\0imported-key-pw\0' | \
 		sigul -c client/client.conf --batch -v -v \
		import-key imported-ecc-key \
		--key-type ECC \
		testecckey.pem])
AT_CHECK([printf 'rootroot\0imported\0imported-key-pw\0' | \
 		sigul -c client/client.conf --batch -v -v \
		import-key imported-rsa-key \
		--key-type RSA \
		testrsakey.pem])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-keys], ,
[ecckey (ECC)
imported-ecc-key (ECC)
imported-key (gnupg)
imported-rsa-key (RSA)
key (gnupg)
rsakey (RSA)
])


# failed import-key
AT_CHECK([printf 'rootroot\0imported\0imported-key-pw\0' | \
 		sigul -c client/client.conf --batch -v -v \
		import-key imported-key-failed \
		"$abs_srcdir/tests/imported-public-key.asc"], 1,, [ignore])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-keys], ,
[ecckey (ECC)
imported-ecc-key (ECC)
imported-key (gnupg)
imported-rsa-key (RSA)
key (gnupg)
rsakey (RSA)
])


# modify-key
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		modify-key --new-name keyX key])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-keys], ,
[ecckey (ECC)
imported-ecc-key (ECC)
imported-key (gnupg)
imported-rsa-key (RSA)
keyX (gnupg)
rsakey (RSA)
])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		modify-key --new-name key keyX])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-keys], ,
[ecckey (ECC)
imported-ecc-key (ECC)
imported-key (gnupg)
imported-rsa-key (RSA)
key (gnupg)
rsakey (RSA)
])


# list-key-users
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-key-users key], ,
[root
])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-key-users --password key], ,
[root
])


# grant-key-access
AT_CHECK([printf 'root-key-pw\0keypw2\0' | \
		sigul -c client/client.conf --batch \
		grant-key-access key root], 1, ,
[Error: The specified object already exists
])
AT_CHECK([printf 'root-key-pw\0unprivileged-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		grant-key-access key unprivileged])
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-key-users key], ,
[root
unprivileged
])


# modify-key-user
AT_CHECK([printf 'rootroot\0' | \
 		sigul -c client/client.conf --batch -v -v \
		key-user-info unprivileged key], ,
[Access defined, key administrator: no
])
AT_CHECK([printf 'rootroot\0unprivileged-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		modify-key-user --key-admin yes unprivileged key])
AT_CHECK([printf 'rootroot\0' | \
 		sigul -c client/client.conf --batch -v -v \
		key-user-info unprivileged key], ,
[Access defined, key administrator: yes
])
AT_CHECK([printf 'rootroot\0unprivileged-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		modify-key-user --key-admin no unprivileged key])
AT_CHECK([printf 'rootroot\0' | \
 		sigul -c client/client.conf --batch -v -v \
		key-user-info unprivileged key], ,
[Access defined, key administrator: no
])


# revoke-key-access
AT_CHECK([printf 'root-key-pw\0unprivileged2-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		grant-key-access key unprivileged2-pw])
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-key-users key], ,
[root
unprivileged
unprivileged2-pw
])
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		revoke-key-access key unprivileged2-pw])
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-key-users key], ,
[root
unprivileged
])
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch \
		revoke-key-access key unprivileged2-pw], 1, ,
[Error: The specified user can not access this key
])
AT_CHECK([printf 'imported-key-pw\0' | \
		sigul -c client/client.conf --batch \
		revoke-key-access imported-key root], 1, ,
[Error: This is the only user with access to this key
])


# get-public-key
AT_CHECK([printf 'imported-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		get-public-key imported-key > public.asc])
AT_CHECK([grep -v 'Version: ' < public.asc | \
		cmp - "$abs_srcdir/tests/imported-public-key.asc"])

AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		get-public-key ecckey > eccpublic.pem])
AT_CHECK([grep 'BEGIN PUBLIC KEY' eccpublic.pem], 0, [ignore])
rm public.asc eccpublic.pem


# delete-key
AT_CHECK([printf 'imported-key-pw\0unprivileged-imported-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		grant-key-access imported-key unprivileged])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		delete-key imported-key])
AT_CHECK([printf 'rootroot\0' | \
		sigul -c client/client.conf --batch -v -v \
		list-keys], ,
[ecckey (ECC)
imported-ecc-key (ECC)
imported-rsa-key (RSA)
key (gnupg)
rsakey (RSA)
])


# change-passphrase
AT_CHECK([printf 'root-key-pw\0pwY\0' | \
		sigul -c client/client.conf --batch -v -v \
		change-passphrase key])
AT_CHECK([printf 'pwY\0root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		change-passphrase key])


# Set up users of the key
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		get-public-key key > public.asc])
AT_CHECK([gpg -q --homedir gnupg --import public.asc])
AT_CHECK([rpm --dbpath "$(pwd)/rpm" --initdb])
AT_CHECK([rpm --dbpath "$(pwd)/rpm" --import public.asc])
rm public.asc

# sign-text
AT_DATA([data], [[abracadabra
]])
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		sign-text -o data.asc key data])
AT_CHECK([gpg -q --homedir gnupg --verify data.asc], , , [ignore])
AT_CHECK([printf 'unprivileged-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		-u unprivileged sign-text -o data.asc key data])
AT_CHECK([gpg -q --homedir gnupg --verify data.asc], , , [ignore])
AT_CHECK([printf 'unprivileged2-key-pw\0' | \
		sigul -c client/client.conf --batch \
		-u unprivileged2-pw sign-text -o data.asc key data], 1, ,
[Error: Authentication failed
])
rm data data.asc

# sign-git-tag
AT_CHECK([mkdir gitrepo])
AT_CHECK([cd gitrepo; \
        git init; \
        git config user.name sigultest; \
        git config user.email sigul@test.example.com; \
        echo foobar >baz; \
        git add baz; \
        git commit -m foobar; \
        git tag -a testtag -m testing; \
        cd ..], 0, [ignore])
AT_CHECK([cd gitrepo;
        printf 'root-key-pw\0' | \
            sigul -c ../client/client.conf --batch -v -v \
            sign-git-tag key testtag; \
        cd ..])
AT_CHECK([GNUPGHOME=gnupg git --git-dir=gitrepo/.git/ tag -v testtag 2>&1 \
        | grep "Good signature"], 0, [ignore])

# sign-data
AT_CHECK([printf '\0abc\1\n\2' > data])
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		sign-data -o data.sig key data])
AT_CHECK([gpg -q --homedir gnupg --verify data.sig data], , , [ignore])
AT_CHECK([grep 'BEGIN PGP ' data.sig], 1, [ignore], [ignore])
rm data.sig
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		sign-data -a -o data.sig key data])
AT_CHECK([gpg -q --homedir gnupg --verify data.sig data], , , [ignore])
AT_CHECK([grep 'BEGIN PGP ' data.sig], 0, [ignore], [ignore])
rm data data.sig


# sign-rpm
# Because of course RPM added a warning when you rpmbuild without post scripts....
# https://bugzilla.redhat.com/show_bug.cgi?id=1540971
# @ignatenkobrain: "It's just a warning, ignore it ;). We will solve it at some point."
AT_CHECK([create_rpm 0], 0, [], [ignore])
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		sign-rpm -o signed.rpm key testrpm0.rpm])
AT_CHECK([rpm --dbpath "$(pwd)/rpm" -Kv signed.rpm | grep Signature], , [ignore])
rm signed.rpm
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		sign-rpm --v3-signature -o signed3.rpm key testrpm0.rpm])
AT_CHECK([rpm --dbpath "$(pwd)/rpm" -Kv signed3.rpm | grep Signature], , [ignore])
rm testrpm0.rpm signed3.rpm
touch empty.rpm
AT_CHECK([printf 'root-key-pw\0' | \
		sigul -c client/client.conf --batch -v -v \
		sign-rpm -o signed.rpm key empty.rpm], 1, ,
[Error: Cannot sign zero-length RPM file empty.rpm
])
rm empty.rpm


m4_include([include_cleanup.at])
